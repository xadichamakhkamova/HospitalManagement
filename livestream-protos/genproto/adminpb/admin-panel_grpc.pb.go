// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: protos/admin-panel-service/admin-panel.proto

package adminpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AdminService_CreateDepartment_FullMethodName  = "/AdminService/CreateDepartment"
	AdminService_GetDepartmentById_FullMethodName = "/AdminService/GetDepartmentById"
	AdminService_ListDepartments_FullMethodName   = "/AdminService/ListDepartments"
	AdminService_UpdateDepartment_FullMethodName  = "/AdminService/UpdateDepartment"
	AdminService_DeleteDepartment_FullMethodName  = "/AdminService/DeleteDepartment"
	AdminService_CreatePersonal_FullMethodName    = "/AdminService/CreatePersonal"
	AdminService_GetPersonalById_FullMethodName   = "/AdminService/GetPersonalById"
	AdminService_ListPersonals_FullMethodName     = "/AdminService/ListPersonals"
	AdminService_UpdatePersonal_FullMethodName    = "/AdminService/UpdatePersonal"
	AdminService_DeletePersonal_FullMethodName    = "/AdminService/DeletePersonal"
	AdminService_CreateDoctor_FullMethodName      = "/AdminService/CreateDoctor"
	AdminService_GetDoctorById_FullMethodName     = "/AdminService/GetDoctorById"
	AdminService_ListDoctors_FullMethodName       = "/AdminService/ListDoctors"
	AdminService_UpdateDoctor_FullMethodName      = "/AdminService/UpdateDoctor"
	AdminService_DeleteDoctor_FullMethodName      = "/AdminService/DeleteDoctor"
	AdminService_CreateBed_FullMethodName         = "/AdminService/CreateBed"
	AdminService_GetBedByID_FullMethodName        = "/AdminService/GetBedByID"
	AdminService_ListBedS_FullMethodName          = "/AdminService/ListBedS"
	AdminService_UpdateBed_FullMethodName         = "/AdminService/UpdateBed"
	AdminService_DeleteBed_FullMethodName         = "/AdminService/DeleteBed"
)

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ---------------- Service ----------------
type AdminServiceClient interface {
	// Department
	CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*CreateDepartmentResponse, error)
	GetDepartmentById(ctx context.Context, in *GetDepartmentByIdRequest, opts ...grpc.CallOption) (*GetDepartmentByIdResponse, error)
	ListDepartments(ctx context.Context, in *ListDepartmentsRequest, opts ...grpc.CallOption) (*ListDepartmentsResponse, error)
	UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*UpdateDepartmentResponse, error)
	DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*DeleteDepartmentResponse, error)
	// Personal
	CreatePersonal(ctx context.Context, in *CreatePersonalRequest, opts ...grpc.CallOption) (*CreatePersonalResponse, error)
	GetPersonalById(ctx context.Context, in *GetPersonalByIdRequest, opts ...grpc.CallOption) (*GetPersonalByIdResponse, error)
	ListPersonals(ctx context.Context, in *ListPersonalsRequest, opts ...grpc.CallOption) (*ListPersonalsResponse, error)
	UpdatePersonal(ctx context.Context, in *UpdatePersonalRequest, opts ...grpc.CallOption) (*UpdatePersonalResponse, error)
	DeletePersonal(ctx context.Context, in *DeletePersonalRequest, opts ...grpc.CallOption) (*DeletePersonalResponse, error)
	// Doctor
	CreateDoctor(ctx context.Context, in *CreateDoctorRequest, opts ...grpc.CallOption) (*CreateDoctorResponse, error)
	GetDoctorById(ctx context.Context, in *GetPersonalByIdRequest, opts ...grpc.CallOption) (*GetDoctorByIdResponse, error)
	ListDoctors(ctx context.Context, in *ListPersonalsRequest, opts ...grpc.CallOption) (*ListDoctorsResponse, error)
	UpdateDoctor(ctx context.Context, in *UpdateDoctorRequest, opts ...grpc.CallOption) (*UpdateDoctorResponse, error)
	DeleteDoctor(ctx context.Context, in *DeletePersonalRequest, opts ...grpc.CallOption) (*DeletePersonalResponse, error)
	// Bed
	CreateBed(ctx context.Context, in *CreateBedRequest, opts ...grpc.CallOption) (*CreateBedResponse, error)
	GetBedByID(ctx context.Context, in *GetBedByIDRequest, opts ...grpc.CallOption) (*GetBedByIDResponse, error)
	ListBedS(ctx context.Context, in *ListBedSRequest, opts ...grpc.CallOption) (*ListBedSResponse, error)
	UpdateBed(ctx context.Context, in *UpdateBedRequest, opts ...grpc.CallOption) (*UpdateBedResponse, error)
	DeleteBed(ctx context.Context, in *DeleteBedRequest, opts ...grpc.CallOption) (*DeleteBedResponse, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) CreateDepartment(ctx context.Context, in *CreateDepartmentRequest, opts ...grpc.CallOption) (*CreateDepartmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDepartmentResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDepartmentById(ctx context.Context, in *GetDepartmentByIdRequest, opts ...grpc.CallOption) (*GetDepartmentByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDepartmentByIdResponse)
	err := c.cc.Invoke(ctx, AdminService_GetDepartmentById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListDepartments(ctx context.Context, in *ListDepartmentsRequest, opts ...grpc.CallOption) (*ListDepartmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDepartmentsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListDepartments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDepartment(ctx context.Context, in *UpdateDepartmentRequest, opts ...grpc.CallOption) (*UpdateDepartmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDepartmentResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteDepartment(ctx context.Context, in *DeleteDepartmentRequest, opts ...grpc.CallOption) (*DeleteDepartmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDepartmentResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteDepartment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreatePersonal(ctx context.Context, in *CreatePersonalRequest, opts ...grpc.CallOption) (*CreatePersonalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePersonalResponse)
	err := c.cc.Invoke(ctx, AdminService_CreatePersonal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetPersonalById(ctx context.Context, in *GetPersonalByIdRequest, opts ...grpc.CallOption) (*GetPersonalByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPersonalByIdResponse)
	err := c.cc.Invoke(ctx, AdminService_GetPersonalById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListPersonals(ctx context.Context, in *ListPersonalsRequest, opts ...grpc.CallOption) (*ListPersonalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPersonalsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListPersonals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdatePersonal(ctx context.Context, in *UpdatePersonalRequest, opts ...grpc.CallOption) (*UpdatePersonalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePersonalResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdatePersonal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeletePersonal(ctx context.Context, in *DeletePersonalRequest, opts ...grpc.CallOption) (*DeletePersonalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePersonalResponse)
	err := c.cc.Invoke(ctx, AdminService_DeletePersonal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateDoctor(ctx context.Context, in *CreateDoctorRequest, opts ...grpc.CallOption) (*CreateDoctorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDoctorResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateDoctor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetDoctorById(ctx context.Context, in *GetPersonalByIdRequest, opts ...grpc.CallOption) (*GetDoctorByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDoctorByIdResponse)
	err := c.cc.Invoke(ctx, AdminService_GetDoctorById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListDoctors(ctx context.Context, in *ListPersonalsRequest, opts ...grpc.CallOption) (*ListDoctorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDoctorsResponse)
	err := c.cc.Invoke(ctx, AdminService_ListDoctors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDoctor(ctx context.Context, in *UpdateDoctorRequest, opts ...grpc.CallOption) (*UpdateDoctorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDoctorResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateDoctor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteDoctor(ctx context.Context, in *DeletePersonalRequest, opts ...grpc.CallOption) (*DeletePersonalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePersonalResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteDoctor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateBed(ctx context.Context, in *CreateBedRequest, opts ...grpc.CallOption) (*CreateBedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBedResponse)
	err := c.cc.Invoke(ctx, AdminService_CreateBed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) GetBedByID(ctx context.Context, in *GetBedByIDRequest, opts ...grpc.CallOption) (*GetBedByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBedByIDResponse)
	err := c.cc.Invoke(ctx, AdminService_GetBedByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListBedS(ctx context.Context, in *ListBedSRequest, opts ...grpc.CallOption) (*ListBedSResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBedSResponse)
	err := c.cc.Invoke(ctx, AdminService_ListBedS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateBed(ctx context.Context, in *UpdateBedRequest, opts ...grpc.CallOption) (*UpdateBedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateBedResponse)
	err := c.cc.Invoke(ctx, AdminService_UpdateBed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteBed(ctx context.Context, in *DeleteBedRequest, opts ...grpc.CallOption) (*DeleteBedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteBedResponse)
	err := c.cc.Invoke(ctx, AdminService_DeleteBed_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
//
// ---------------- Service ----------------
type AdminServiceServer interface {
	// Department
	CreateDepartment(context.Context, *CreateDepartmentRequest) (*CreateDepartmentResponse, error)
	GetDepartmentById(context.Context, *GetDepartmentByIdRequest) (*GetDepartmentByIdResponse, error)
	ListDepartments(context.Context, *ListDepartmentsRequest) (*ListDepartmentsResponse, error)
	UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*UpdateDepartmentResponse, error)
	DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*DeleteDepartmentResponse, error)
	// Personal
	CreatePersonal(context.Context, *CreatePersonalRequest) (*CreatePersonalResponse, error)
	GetPersonalById(context.Context, *GetPersonalByIdRequest) (*GetPersonalByIdResponse, error)
	ListPersonals(context.Context, *ListPersonalsRequest) (*ListPersonalsResponse, error)
	UpdatePersonal(context.Context, *UpdatePersonalRequest) (*UpdatePersonalResponse, error)
	DeletePersonal(context.Context, *DeletePersonalRequest) (*DeletePersonalResponse, error)
	// Doctor
	CreateDoctor(context.Context, *CreateDoctorRequest) (*CreateDoctorResponse, error)
	GetDoctorById(context.Context, *GetPersonalByIdRequest) (*GetDoctorByIdResponse, error)
	ListDoctors(context.Context, *ListPersonalsRequest) (*ListDoctorsResponse, error)
	UpdateDoctor(context.Context, *UpdateDoctorRequest) (*UpdateDoctorResponse, error)
	DeleteDoctor(context.Context, *DeletePersonalRequest) (*DeletePersonalResponse, error)
	// Bed
	CreateBed(context.Context, *CreateBedRequest) (*CreateBedResponse, error)
	GetBedByID(context.Context, *GetBedByIDRequest) (*GetBedByIDResponse, error)
	ListBedS(context.Context, *ListBedSRequest) (*ListBedSResponse, error)
	UpdateBed(context.Context, *UpdateBedRequest) (*UpdateBedResponse, error)
	DeleteBed(context.Context, *DeleteBedRequest) (*DeleteBedResponse, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) CreateDepartment(context.Context, *CreateDepartmentRequest) (*CreateDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDepartment not implemented")
}
func (UnimplementedAdminServiceServer) GetDepartmentById(context.Context, *GetDepartmentByIdRequest) (*GetDepartmentByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepartmentById not implemented")
}
func (UnimplementedAdminServiceServer) ListDepartments(context.Context, *ListDepartmentsRequest) (*ListDepartmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDepartments not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDepartment(context.Context, *UpdateDepartmentRequest) (*UpdateDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDepartment not implemented")
}
func (UnimplementedAdminServiceServer) DeleteDepartment(context.Context, *DeleteDepartmentRequest) (*DeleteDepartmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDepartment not implemented")
}
func (UnimplementedAdminServiceServer) CreatePersonal(context.Context, *CreatePersonalRequest) (*CreatePersonalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePersonal not implemented")
}
func (UnimplementedAdminServiceServer) GetPersonalById(context.Context, *GetPersonalByIdRequest) (*GetPersonalByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersonalById not implemented")
}
func (UnimplementedAdminServiceServer) ListPersonals(context.Context, *ListPersonalsRequest) (*ListPersonalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPersonals not implemented")
}
func (UnimplementedAdminServiceServer) UpdatePersonal(context.Context, *UpdatePersonalRequest) (*UpdatePersonalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePersonal not implemented")
}
func (UnimplementedAdminServiceServer) DeletePersonal(context.Context, *DeletePersonalRequest) (*DeletePersonalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersonal not implemented")
}
func (UnimplementedAdminServiceServer) CreateDoctor(context.Context, *CreateDoctorRequest) (*CreateDoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDoctor not implemented")
}
func (UnimplementedAdminServiceServer) GetDoctorById(context.Context, *GetPersonalByIdRequest) (*GetDoctorByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDoctorById not implemented")
}
func (UnimplementedAdminServiceServer) ListDoctors(context.Context, *ListPersonalsRequest) (*ListDoctorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDoctors not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDoctor(context.Context, *UpdateDoctorRequest) (*UpdateDoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDoctor not implemented")
}
func (UnimplementedAdminServiceServer) DeleteDoctor(context.Context, *DeletePersonalRequest) (*DeletePersonalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDoctor not implemented")
}
func (UnimplementedAdminServiceServer) CreateBed(context.Context, *CreateBedRequest) (*CreateBedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBed not implemented")
}
func (UnimplementedAdminServiceServer) GetBedByID(context.Context, *GetBedByIDRequest) (*GetBedByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBedByID not implemented")
}
func (UnimplementedAdminServiceServer) ListBedS(context.Context, *ListBedSRequest) (*ListBedSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBedS not implemented")
}
func (UnimplementedAdminServiceServer) UpdateBed(context.Context, *UpdateBedRequest) (*UpdateBedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBed not implemented")
}
func (UnimplementedAdminServiceServer) DeleteBed(context.Context, *DeleteBedRequest) (*DeleteBedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBed not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_CreateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateDepartment(ctx, req.(*CreateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDepartmentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepartmentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDepartmentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDepartmentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDepartmentById(ctx, req.(*GetDepartmentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListDepartments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepartmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListDepartments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListDepartments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListDepartments(ctx, req.(*ListDepartmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDepartment(ctx, req.(*UpdateDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteDepartment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteDepartment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteDepartment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteDepartment(ctx, req.(*DeleteDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreatePersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreatePersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreatePersonal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreatePersonal(ctx, req.(*CreatePersonalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetPersonalById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetPersonalById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetPersonalById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetPersonalById(ctx, req.(*GetPersonalByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListPersonals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersonalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListPersonals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListPersonals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListPersonals(ctx, req.(*ListPersonalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdatePersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePersonalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdatePersonal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePersonal(ctx, req.(*UpdatePersonalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeletePersonal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeletePersonal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeletePersonal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeletePersonal(ctx, req.(*DeletePersonalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateDoctor(ctx, req.(*CreateDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetDoctorById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersonalByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetDoctorById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetDoctorById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetDoctorById(ctx, req.(*GetPersonalByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListDoctors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPersonalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListDoctors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListDoctors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListDoctors(ctx, req.(*ListPersonalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDoctorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDoctor(ctx, req.(*UpdateDoctorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteDoctor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteDoctor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteDoctor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteDoctor(ctx, req.(*DeletePersonalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateBed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateBed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_CreateBed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateBed(ctx, req.(*CreateBedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_GetBedByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBedByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).GetBedByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_GetBedByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).GetBedByID(ctx, req.(*GetBedByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListBedS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBedSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListBedS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_ListBedS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListBedS(ctx, req.(*ListBedSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateBed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateBed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_UpdateBed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateBed(ctx, req.(*UpdateBedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteBed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteBed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminService_DeleteBed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteBed(ctx, req.(*DeleteBedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDepartment",
			Handler:    _AdminService_CreateDepartment_Handler,
		},
		{
			MethodName: "GetDepartmentById",
			Handler:    _AdminService_GetDepartmentById_Handler,
		},
		{
			MethodName: "ListDepartments",
			Handler:    _AdminService_ListDepartments_Handler,
		},
		{
			MethodName: "UpdateDepartment",
			Handler:    _AdminService_UpdateDepartment_Handler,
		},
		{
			MethodName: "DeleteDepartment",
			Handler:    _AdminService_DeleteDepartment_Handler,
		},
		{
			MethodName: "CreatePersonal",
			Handler:    _AdminService_CreatePersonal_Handler,
		},
		{
			MethodName: "GetPersonalById",
			Handler:    _AdminService_GetPersonalById_Handler,
		},
		{
			MethodName: "ListPersonals",
			Handler:    _AdminService_ListPersonals_Handler,
		},
		{
			MethodName: "UpdatePersonal",
			Handler:    _AdminService_UpdatePersonal_Handler,
		},
		{
			MethodName: "DeletePersonal",
			Handler:    _AdminService_DeletePersonal_Handler,
		},
		{
			MethodName: "CreateDoctor",
			Handler:    _AdminService_CreateDoctor_Handler,
		},
		{
			MethodName: "GetDoctorById",
			Handler:    _AdminService_GetDoctorById_Handler,
		},
		{
			MethodName: "ListDoctors",
			Handler:    _AdminService_ListDoctors_Handler,
		},
		{
			MethodName: "UpdateDoctor",
			Handler:    _AdminService_UpdateDoctor_Handler,
		},
		{
			MethodName: "DeleteDoctor",
			Handler:    _AdminService_DeleteDoctor_Handler,
		},
		{
			MethodName: "CreateBed",
			Handler:    _AdminService_CreateBed_Handler,
		},
		{
			MethodName: "GetBedByID",
			Handler:    _AdminService_GetBedByID_Handler,
		},
		{
			MethodName: "ListBedS",
			Handler:    _AdminService_ListBedS_Handler,
		},
		{
			MethodName: "UpdateBed",
			Handler:    _AdminService_UpdateBed_Handler,
		},
		{
			MethodName: "DeleteBed",
			Handler:    _AdminService_DeleteBed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/admin-panel-service/admin-panel.proto",
}
