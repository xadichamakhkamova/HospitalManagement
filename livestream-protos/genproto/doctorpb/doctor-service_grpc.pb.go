// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: protos/doctor-service/doctor-service.proto

package doctorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	DoctorService_CreateAppointment_FullMethodName   = "/DoctorService/CreateAppointment"
	DoctorService_GetAppointmentById_FullMethodName  = "/DoctorService/GetAppointmentById"
	DoctorService_ListAppointments_FullMethodName    = "/DoctorService/ListAppointments"
	DoctorService_UpdateAppointment_FullMethodName   = "/DoctorService/UpdateAppointment"
	DoctorService_DeleteAppointment_FullMethodName   = "/DoctorService/DeleteAppointment"
	DoctorService_CreatePrescription_FullMethodName  = "/DoctorService/CreatePrescription"
	DoctorService_GetPrescriptionById_FullMethodName = "/DoctorService/GetPrescriptionById"
	DoctorService_ListPrescriptions_FullMethodName   = "/DoctorService/ListPrescriptions"
	DoctorService_UpdatePrescription_FullMethodName  = "/DoctorService/UpdatePrescription"
	DoctorService_DeletePrescription_FullMethodName  = "/DoctorService/DeletePrescription"
)

// DoctorServiceClient is the client API for DoctorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ---------------- Service ----------------
type DoctorServiceClient interface {
	// Appointment
	CreateAppointment(ctx context.Context, in *CreateAppointmentRequest, opts ...grpc.CallOption) (*CreateAppointmentResponse, error)
	GetAppointmentById(ctx context.Context, in *GetAppointmentByIdRequest, opts ...grpc.CallOption) (*GetAppointmentByIdResponse, error)
	ListAppointments(ctx context.Context, in *ListAppointmentsRequest, opts ...grpc.CallOption) (*ListAppointmentsResponse, error)
	UpdateAppointment(ctx context.Context, in *UpdateAppointmentRequest, opts ...grpc.CallOption) (*UpdateAppointmentResponse, error)
	DeleteAppointment(ctx context.Context, in *DeleteAppointmentRequest, opts ...grpc.CallOption) (*DeleteAppointmentResponse, error)
	// Prescription
	CreatePrescription(ctx context.Context, in *CreatePrescriptionRequest, opts ...grpc.CallOption) (*CreatePrescriptionResponse, error)
	GetPrescriptionById(ctx context.Context, in *GetPrescriptionByIdRequest, opts ...grpc.CallOption) (*GetPrescriptionByIdResponse, error)
	ListPrescriptions(ctx context.Context, in *ListPrescriptionsRequest, opts ...grpc.CallOption) (*ListPrescriptionsResponse, error)
	UpdatePrescription(ctx context.Context, in *UpdatePrescriptionRequest, opts ...grpc.CallOption) (*UpdatePrescriptionResponse, error)
	DeletePrescription(ctx context.Context, in *DeletePrescriptionRequest, opts ...grpc.CallOption) (*DeletePrescriptionResponse, error)
}

type doctorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDoctorServiceClient(cc grpc.ClientConnInterface) DoctorServiceClient {
	return &doctorServiceClient{cc}
}

func (c *doctorServiceClient) CreateAppointment(ctx context.Context, in *CreateAppointmentRequest, opts ...grpc.CallOption) (*CreateAppointmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAppointmentResponse)
	err := c.cc.Invoke(ctx, DoctorService_CreateAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) GetAppointmentById(ctx context.Context, in *GetAppointmentByIdRequest, opts ...grpc.CallOption) (*GetAppointmentByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAppointmentByIdResponse)
	err := c.cc.Invoke(ctx, DoctorService_GetAppointmentById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) ListAppointments(ctx context.Context, in *ListAppointmentsRequest, opts ...grpc.CallOption) (*ListAppointmentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAppointmentsResponse)
	err := c.cc.Invoke(ctx, DoctorService_ListAppointments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) UpdateAppointment(ctx context.Context, in *UpdateAppointmentRequest, opts ...grpc.CallOption) (*UpdateAppointmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAppointmentResponse)
	err := c.cc.Invoke(ctx, DoctorService_UpdateAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) DeleteAppointment(ctx context.Context, in *DeleteAppointmentRequest, opts ...grpc.CallOption) (*DeleteAppointmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAppointmentResponse)
	err := c.cc.Invoke(ctx, DoctorService_DeleteAppointment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) CreatePrescription(ctx context.Context, in *CreatePrescriptionRequest, opts ...grpc.CallOption) (*CreatePrescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePrescriptionResponse)
	err := c.cc.Invoke(ctx, DoctorService_CreatePrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) GetPrescriptionById(ctx context.Context, in *GetPrescriptionByIdRequest, opts ...grpc.CallOption) (*GetPrescriptionByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPrescriptionByIdResponse)
	err := c.cc.Invoke(ctx, DoctorService_GetPrescriptionById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) ListPrescriptions(ctx context.Context, in *ListPrescriptionsRequest, opts ...grpc.CallOption) (*ListPrescriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPrescriptionsResponse)
	err := c.cc.Invoke(ctx, DoctorService_ListPrescriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) UpdatePrescription(ctx context.Context, in *UpdatePrescriptionRequest, opts ...grpc.CallOption) (*UpdatePrescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePrescriptionResponse)
	err := c.cc.Invoke(ctx, DoctorService_UpdatePrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doctorServiceClient) DeletePrescription(ctx context.Context, in *DeletePrescriptionRequest, opts ...grpc.CallOption) (*DeletePrescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePrescriptionResponse)
	err := c.cc.Invoke(ctx, DoctorService_DeletePrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoctorServiceServer is the server API for DoctorService service.
// All implementations must embed UnimplementedDoctorServiceServer
// for forward compatibility
//
// ---------------- Service ----------------
type DoctorServiceServer interface {
	// Appointment
	CreateAppointment(context.Context, *CreateAppointmentRequest) (*CreateAppointmentResponse, error)
	GetAppointmentById(context.Context, *GetAppointmentByIdRequest) (*GetAppointmentByIdResponse, error)
	ListAppointments(context.Context, *ListAppointmentsRequest) (*ListAppointmentsResponse, error)
	UpdateAppointment(context.Context, *UpdateAppointmentRequest) (*UpdateAppointmentResponse, error)
	DeleteAppointment(context.Context, *DeleteAppointmentRequest) (*DeleteAppointmentResponse, error)
	// Prescription
	CreatePrescription(context.Context, *CreatePrescriptionRequest) (*CreatePrescriptionResponse, error)
	GetPrescriptionById(context.Context, *GetPrescriptionByIdRequest) (*GetPrescriptionByIdResponse, error)
	ListPrescriptions(context.Context, *ListPrescriptionsRequest) (*ListPrescriptionsResponse, error)
	UpdatePrescription(context.Context, *UpdatePrescriptionRequest) (*UpdatePrescriptionResponse, error)
	DeletePrescription(context.Context, *DeletePrescriptionRequest) (*DeletePrescriptionResponse, error)
	mustEmbedUnimplementedDoctorServiceServer()
}

// UnimplementedDoctorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDoctorServiceServer struct {
}

func (UnimplementedDoctorServiceServer) CreateAppointment(context.Context, *CreateAppointmentRequest) (*CreateAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppointment not implemented")
}
func (UnimplementedDoctorServiceServer) GetAppointmentById(context.Context, *GetAppointmentByIdRequest) (*GetAppointmentByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentById not implemented")
}
func (UnimplementedDoctorServiceServer) ListAppointments(context.Context, *ListAppointmentsRequest) (*ListAppointmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppointments not implemented")
}
func (UnimplementedDoctorServiceServer) UpdateAppointment(context.Context, *UpdateAppointmentRequest) (*UpdateAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppointment not implemented")
}
func (UnimplementedDoctorServiceServer) DeleteAppointment(context.Context, *DeleteAppointmentRequest) (*DeleteAppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppointment not implemented")
}
func (UnimplementedDoctorServiceServer) CreatePrescription(context.Context, *CreatePrescriptionRequest) (*CreatePrescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrescription not implemented")
}
func (UnimplementedDoctorServiceServer) GetPrescriptionById(context.Context, *GetPrescriptionByIdRequest) (*GetPrescriptionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrescriptionById not implemented")
}
func (UnimplementedDoctorServiceServer) ListPrescriptions(context.Context, *ListPrescriptionsRequest) (*ListPrescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrescriptions not implemented")
}
func (UnimplementedDoctorServiceServer) UpdatePrescription(context.Context, *UpdatePrescriptionRequest) (*UpdatePrescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrescription not implemented")
}
func (UnimplementedDoctorServiceServer) DeletePrescription(context.Context, *DeletePrescriptionRequest) (*DeletePrescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrescription not implemented")
}
func (UnimplementedDoctorServiceServer) mustEmbedUnimplementedDoctorServiceServer() {}

// UnsafeDoctorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoctorServiceServer will
// result in compilation errors.
type UnsafeDoctorServiceServer interface {
	mustEmbedUnimplementedDoctorServiceServer()
}

func RegisterDoctorServiceServer(s grpc.ServiceRegistrar, srv DoctorServiceServer) {
	s.RegisterService(&DoctorService_ServiceDesc, srv)
}

func _DoctorService_CreateAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).CreateAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_CreateAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).CreateAppointment(ctx, req.(*CreateAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_GetAppointmentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppointmentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).GetAppointmentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_GetAppointmentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).GetAppointmentById(ctx, req.(*GetAppointmentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_ListAppointments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAppointmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).ListAppointments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_ListAppointments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).ListAppointments(ctx, req.(*ListAppointmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_UpdateAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).UpdateAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_UpdateAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).UpdateAppointment(ctx, req.(*UpdateAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_DeleteAppointment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppointmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).DeleteAppointment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_DeleteAppointment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).DeleteAppointment(ctx, req.(*DeleteAppointmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_CreatePrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).CreatePrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_CreatePrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).CreatePrescription(ctx, req.(*CreatePrescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_GetPrescriptionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrescriptionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).GetPrescriptionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_GetPrescriptionById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).GetPrescriptionById(ctx, req.(*GetPrescriptionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_ListPrescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).ListPrescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_ListPrescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).ListPrescriptions(ctx, req.(*ListPrescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_UpdatePrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).UpdatePrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_UpdatePrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).UpdatePrescription(ctx, req.(*UpdatePrescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoctorService_DeletePrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePrescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoctorServiceServer).DeletePrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DoctorService_DeletePrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoctorServiceServer).DeletePrescription(ctx, req.(*DeletePrescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DoctorService_ServiceDesc is the grpc.ServiceDesc for DoctorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DoctorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DoctorService",
	HandlerType: (*DoctorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppointment",
			Handler:    _DoctorService_CreateAppointment_Handler,
		},
		{
			MethodName: "GetAppointmentById",
			Handler:    _DoctorService_GetAppointmentById_Handler,
		},
		{
			MethodName: "ListAppointments",
			Handler:    _DoctorService_ListAppointments_Handler,
		},
		{
			MethodName: "UpdateAppointment",
			Handler:    _DoctorService_UpdateAppointment_Handler,
		},
		{
			MethodName: "DeleteAppointment",
			Handler:    _DoctorService_DeleteAppointment_Handler,
		},
		{
			MethodName: "CreatePrescription",
			Handler:    _DoctorService_CreatePrescription_Handler,
		},
		{
			MethodName: "GetPrescriptionById",
			Handler:    _DoctorService_GetPrescriptionById_Handler,
		},
		{
			MethodName: "ListPrescriptions",
			Handler:    _DoctorService_ListPrescriptions_Handler,
		},
		{
			MethodName: "UpdatePrescription",
			Handler:    _DoctorService_UpdatePrescription_Handler,
		},
		{
			MethodName: "DeletePrescription",
			Handler:    _DoctorService_DeletePrescription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/doctor-service/doctor-service.proto",
}
