// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: protos/patient-management-service/patient-service.proto

package patientpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PatientManagementService_CreatePatient_FullMethodName  = "/PatientManagementService/CreatePatient"
	PatientManagementService_GetPatientById_FullMethodName = "/PatientManagementService/GetPatientById"
	PatientManagementService_ListPatient_FullMethodName    = "/PatientManagementService/ListPatient"
	PatientManagementService_UpdatePatient_FullMethodName  = "/PatientManagementService/UpdatePatient"
	PatientManagementService_DeletePatient_FullMethodName  = "/PatientManagementService/DeletePatient"
)

// PatientManagementServiceClient is the client API for PatientManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ---------------- Service ----------------
type PatientManagementServiceClient interface {
	// Patient Management
	CreatePatient(ctx context.Context, in *CreatePatientRequest, opts ...grpc.CallOption) (*CreatePatientResponse, error)
	GetPatientById(ctx context.Context, in *GetPatientByIdRequest, opts ...grpc.CallOption) (*GetPatientByIdResponse, error)
	ListPatient(ctx context.Context, in *ListPatientsRequest, opts ...grpc.CallOption) (*ListPatientsResponse, error)
	UpdatePatient(ctx context.Context, in *UpdatePatientRequest, opts ...grpc.CallOption) (*UpdatePatientResponse, error)
	DeletePatient(ctx context.Context, in *DeletePatientRequest, opts ...grpc.CallOption) (*DeletePatientResponse, error)
}

type patientManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPatientManagementServiceClient(cc grpc.ClientConnInterface) PatientManagementServiceClient {
	return &patientManagementServiceClient{cc}
}

func (c *patientManagementServiceClient) CreatePatient(ctx context.Context, in *CreatePatientRequest, opts ...grpc.CallOption) (*CreatePatientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePatientResponse)
	err := c.cc.Invoke(ctx, PatientManagementService_CreatePatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientManagementServiceClient) GetPatientById(ctx context.Context, in *GetPatientByIdRequest, opts ...grpc.CallOption) (*GetPatientByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPatientByIdResponse)
	err := c.cc.Invoke(ctx, PatientManagementService_GetPatientById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientManagementServiceClient) ListPatient(ctx context.Context, in *ListPatientsRequest, opts ...grpc.CallOption) (*ListPatientsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPatientsResponse)
	err := c.cc.Invoke(ctx, PatientManagementService_ListPatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientManagementServiceClient) UpdatePatient(ctx context.Context, in *UpdatePatientRequest, opts ...grpc.CallOption) (*UpdatePatientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePatientResponse)
	err := c.cc.Invoke(ctx, PatientManagementService_UpdatePatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *patientManagementServiceClient) DeletePatient(ctx context.Context, in *DeletePatientRequest, opts ...grpc.CallOption) (*DeletePatientResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePatientResponse)
	err := c.cc.Invoke(ctx, PatientManagementService_DeletePatient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PatientManagementServiceServer is the server API for PatientManagementService service.
// All implementations must embed UnimplementedPatientManagementServiceServer
// for forward compatibility
//
// ---------------- Service ----------------
type PatientManagementServiceServer interface {
	// Patient Management
	CreatePatient(context.Context, *CreatePatientRequest) (*CreatePatientResponse, error)
	GetPatientById(context.Context, *GetPatientByIdRequest) (*GetPatientByIdResponse, error)
	ListPatient(context.Context, *ListPatientsRequest) (*ListPatientsResponse, error)
	UpdatePatient(context.Context, *UpdatePatientRequest) (*UpdatePatientResponse, error)
	DeletePatient(context.Context, *DeletePatientRequest) (*DeletePatientResponse, error)
	mustEmbedUnimplementedPatientManagementServiceServer()
}

// UnimplementedPatientManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPatientManagementServiceServer struct {
}

func (UnimplementedPatientManagementServiceServer) CreatePatient(context.Context, *CreatePatientRequest) (*CreatePatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePatient not implemented")
}
func (UnimplementedPatientManagementServiceServer) GetPatientById(context.Context, *GetPatientByIdRequest) (*GetPatientByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPatientById not implemented")
}
func (UnimplementedPatientManagementServiceServer) ListPatient(context.Context, *ListPatientsRequest) (*ListPatientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPatient not implemented")
}
func (UnimplementedPatientManagementServiceServer) UpdatePatient(context.Context, *UpdatePatientRequest) (*UpdatePatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePatient not implemented")
}
func (UnimplementedPatientManagementServiceServer) DeletePatient(context.Context, *DeletePatientRequest) (*DeletePatientResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePatient not implemented")
}
func (UnimplementedPatientManagementServiceServer) mustEmbedUnimplementedPatientManagementServiceServer() {
}

// UnsafePatientManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PatientManagementServiceServer will
// result in compilation errors.
type UnsafePatientManagementServiceServer interface {
	mustEmbedUnimplementedPatientManagementServiceServer()
}

func RegisterPatientManagementServiceServer(s grpc.ServiceRegistrar, srv PatientManagementServiceServer) {
	s.RegisterService(&PatientManagementService_ServiceDesc, srv)
}

func _PatientManagementService_CreatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientManagementServiceServer).CreatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientManagementService_CreatePatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientManagementServiceServer).CreatePatient(ctx, req.(*CreatePatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientManagementService_GetPatientById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPatientByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientManagementServiceServer).GetPatientById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientManagementService_GetPatientById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientManagementServiceServer).GetPatientById(ctx, req.(*GetPatientByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientManagementService_ListPatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPatientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientManagementServiceServer).ListPatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientManagementService_ListPatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientManagementServiceServer).ListPatient(ctx, req.(*ListPatientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientManagementService_UpdatePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientManagementServiceServer).UpdatePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientManagementService_UpdatePatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientManagementServiceServer).UpdatePatient(ctx, req.(*UpdatePatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PatientManagementService_DeletePatient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePatientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PatientManagementServiceServer).DeletePatient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PatientManagementService_DeletePatient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PatientManagementServiceServer).DeletePatient(ctx, req.(*DeletePatientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PatientManagementService_ServiceDesc is the grpc.ServiceDesc for PatientManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PatientManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PatientManagementService",
	HandlerType: (*PatientManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePatient",
			Handler:    _PatientManagementService_CreatePatient_Handler,
		},
		{
			MethodName: "GetPatientById",
			Handler:    _PatientManagementService_GetPatientById_Handler,
		},
		{
			MethodName: "ListPatient",
			Handler:    _PatientManagementService_ListPatient_Handler,
		},
		{
			MethodName: "UpdatePatient",
			Handler:    _PatientManagementService_UpdatePatient_Handler,
		},
		{
			MethodName: "DeletePatient",
			Handler:    _PatientManagementService_DeletePatient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/patient-management-service/patient-service.proto",
}
