// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.0
// source: protos/pharmacist-service/pharmacist-service.proto

package pharmacistpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PharmacistService_CreateMedicine_FullMethodName          = "/PharmacistService/CreateMedicine"
	PharmacistService_GetMedicineById_FullMethodName         = "/PharmacistService/GetMedicineById"
	PharmacistService_ListMedicines_FullMethodName           = "/PharmacistService/ListMedicines"
	PharmacistService_UpdateMedicine_FullMethodName          = "/PharmacistService/UpdateMedicine"
	PharmacistService_DeleteMedicine_FullMethodName          = "/PharmacistService/DeleteMedicine"
	PharmacistService_CreateMedicineCategory_FullMethodName  = "/PharmacistService/CreateMedicineCategory"
	PharmacistService_GetMedicineCategoryById_FullMethodName = "/PharmacistService/GetMedicineCategoryById"
	PharmacistService_ListMedicineCategories_FullMethodName  = "/PharmacistService/ListMedicineCategories"
	PharmacistService_UpdateMedicineCategory_FullMethodName  = "/PharmacistService/UpdateMedicineCategory"
	PharmacistService_DeleteMedicineCategory_FullMethodName  = "/PharmacistService/DeleteMedicineCategory"
)

// PharmacistServiceClient is the client API for PharmacistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ---------------- Service ----------------
type PharmacistServiceClient interface {
	// Medicine
	CreateMedicine(ctx context.Context, in *CreateMedicineRequest, opts ...grpc.CallOption) (*CreateMedicineResponse, error)
	GetMedicineById(ctx context.Context, in *GetMedicineByIdRequest, opts ...grpc.CallOption) (*GetMedicineByIdResponse, error)
	ListMedicines(ctx context.Context, in *ListMedicinesRequest, opts ...grpc.CallOption) (*ListMedicinesResponse, error)
	UpdateMedicine(ctx context.Context, in *UpdateMedicineRequest, opts ...grpc.CallOption) (*UpdateMedicineResponse, error)
	DeleteMedicine(ctx context.Context, in *DeleteMedicineRequest, opts ...grpc.CallOption) (*DeleteMedicineResponse, error)
	// Medicine Category
	CreateMedicineCategory(ctx context.Context, in *CreateMedicineCategoryRequest, opts ...grpc.CallOption) (*CreateMedicineCategoryResponse, error)
	GetMedicineCategoryById(ctx context.Context, in *GetMedicineCategoryByIdRequest, opts ...grpc.CallOption) (*GetMedicineCategoryByIdResponse, error)
	ListMedicineCategories(ctx context.Context, in *ListMedicineCategoriesRequest, opts ...grpc.CallOption) (*ListMedicineCategoriesResponse, error)
	UpdateMedicineCategory(ctx context.Context, in *UpdateMedicineCategoryRequest, opts ...grpc.CallOption) (*UpdateMedicineCategoryResponse, error)
	DeleteMedicineCategory(ctx context.Context, in *DeleteMedicineCategoryRequest, opts ...grpc.CallOption) (*DeleteMedicineCategoryResponse, error)
}

type pharmacistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPharmacistServiceClient(cc grpc.ClientConnInterface) PharmacistServiceClient {
	return &pharmacistServiceClient{cc}
}

func (c *pharmacistServiceClient) CreateMedicine(ctx context.Context, in *CreateMedicineRequest, opts ...grpc.CallOption) (*CreateMedicineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMedicineResponse)
	err := c.cc.Invoke(ctx, PharmacistService_CreateMedicine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacistServiceClient) GetMedicineById(ctx context.Context, in *GetMedicineByIdRequest, opts ...grpc.CallOption) (*GetMedicineByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMedicineByIdResponse)
	err := c.cc.Invoke(ctx, PharmacistService_GetMedicineById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacistServiceClient) ListMedicines(ctx context.Context, in *ListMedicinesRequest, opts ...grpc.CallOption) (*ListMedicinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMedicinesResponse)
	err := c.cc.Invoke(ctx, PharmacistService_ListMedicines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacistServiceClient) UpdateMedicine(ctx context.Context, in *UpdateMedicineRequest, opts ...grpc.CallOption) (*UpdateMedicineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMedicineResponse)
	err := c.cc.Invoke(ctx, PharmacistService_UpdateMedicine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacistServiceClient) DeleteMedicine(ctx context.Context, in *DeleteMedicineRequest, opts ...grpc.CallOption) (*DeleteMedicineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMedicineResponse)
	err := c.cc.Invoke(ctx, PharmacistService_DeleteMedicine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacistServiceClient) CreateMedicineCategory(ctx context.Context, in *CreateMedicineCategoryRequest, opts ...grpc.CallOption) (*CreateMedicineCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMedicineCategoryResponse)
	err := c.cc.Invoke(ctx, PharmacistService_CreateMedicineCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacistServiceClient) GetMedicineCategoryById(ctx context.Context, in *GetMedicineCategoryByIdRequest, opts ...grpc.CallOption) (*GetMedicineCategoryByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMedicineCategoryByIdResponse)
	err := c.cc.Invoke(ctx, PharmacistService_GetMedicineCategoryById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacistServiceClient) ListMedicineCategories(ctx context.Context, in *ListMedicineCategoriesRequest, opts ...grpc.CallOption) (*ListMedicineCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMedicineCategoriesResponse)
	err := c.cc.Invoke(ctx, PharmacistService_ListMedicineCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacistServiceClient) UpdateMedicineCategory(ctx context.Context, in *UpdateMedicineCategoryRequest, opts ...grpc.CallOption) (*UpdateMedicineCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMedicineCategoryResponse)
	err := c.cc.Invoke(ctx, PharmacistService_UpdateMedicineCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pharmacistServiceClient) DeleteMedicineCategory(ctx context.Context, in *DeleteMedicineCategoryRequest, opts ...grpc.CallOption) (*DeleteMedicineCategoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMedicineCategoryResponse)
	err := c.cc.Invoke(ctx, PharmacistService_DeleteMedicineCategory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PharmacistServiceServer is the server API for PharmacistService service.
// All implementations must embed UnimplementedPharmacistServiceServer
// for forward compatibility
//
// ---------------- Service ----------------
type PharmacistServiceServer interface {
	// Medicine
	CreateMedicine(context.Context, *CreateMedicineRequest) (*CreateMedicineResponse, error)
	GetMedicineById(context.Context, *GetMedicineByIdRequest) (*GetMedicineByIdResponse, error)
	ListMedicines(context.Context, *ListMedicinesRequest) (*ListMedicinesResponse, error)
	UpdateMedicine(context.Context, *UpdateMedicineRequest) (*UpdateMedicineResponse, error)
	DeleteMedicine(context.Context, *DeleteMedicineRequest) (*DeleteMedicineResponse, error)
	// Medicine Category
	CreateMedicineCategory(context.Context, *CreateMedicineCategoryRequest) (*CreateMedicineCategoryResponse, error)
	GetMedicineCategoryById(context.Context, *GetMedicineCategoryByIdRequest) (*GetMedicineCategoryByIdResponse, error)
	ListMedicineCategories(context.Context, *ListMedicineCategoriesRequest) (*ListMedicineCategoriesResponse, error)
	UpdateMedicineCategory(context.Context, *UpdateMedicineCategoryRequest) (*UpdateMedicineCategoryResponse, error)
	DeleteMedicineCategory(context.Context, *DeleteMedicineCategoryRequest) (*DeleteMedicineCategoryResponse, error)
	mustEmbedUnimplementedPharmacistServiceServer()
}

// UnimplementedPharmacistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPharmacistServiceServer struct {
}

func (UnimplementedPharmacistServiceServer) CreateMedicine(context.Context, *CreateMedicineRequest) (*CreateMedicineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedicine not implemented")
}
func (UnimplementedPharmacistServiceServer) GetMedicineById(context.Context, *GetMedicineByIdRequest) (*GetMedicineByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicineById not implemented")
}
func (UnimplementedPharmacistServiceServer) ListMedicines(context.Context, *ListMedicinesRequest) (*ListMedicinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicines not implemented")
}
func (UnimplementedPharmacistServiceServer) UpdateMedicine(context.Context, *UpdateMedicineRequest) (*UpdateMedicineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicine not implemented")
}
func (UnimplementedPharmacistServiceServer) DeleteMedicine(context.Context, *DeleteMedicineRequest) (*DeleteMedicineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedicine not implemented")
}
func (UnimplementedPharmacistServiceServer) CreateMedicineCategory(context.Context, *CreateMedicineCategoryRequest) (*CreateMedicineCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedicineCategory not implemented")
}
func (UnimplementedPharmacistServiceServer) GetMedicineCategoryById(context.Context, *GetMedicineCategoryByIdRequest) (*GetMedicineCategoryByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicineCategoryById not implemented")
}
func (UnimplementedPharmacistServiceServer) ListMedicineCategories(context.Context, *ListMedicineCategoriesRequest) (*ListMedicineCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicineCategories not implemented")
}
func (UnimplementedPharmacistServiceServer) UpdateMedicineCategory(context.Context, *UpdateMedicineCategoryRequest) (*UpdateMedicineCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicineCategory not implemented")
}
func (UnimplementedPharmacistServiceServer) DeleteMedicineCategory(context.Context, *DeleteMedicineCategoryRequest) (*DeleteMedicineCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedicineCategory not implemented")
}
func (UnimplementedPharmacistServiceServer) mustEmbedUnimplementedPharmacistServiceServer() {}

// UnsafePharmacistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PharmacistServiceServer will
// result in compilation errors.
type UnsafePharmacistServiceServer interface {
	mustEmbedUnimplementedPharmacistServiceServer()
}

func RegisterPharmacistServiceServer(s grpc.ServiceRegistrar, srv PharmacistServiceServer) {
	s.RegisterService(&PharmacistService_ServiceDesc, srv)
}

func _PharmacistService_CreateMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMedicineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacistServiceServer).CreateMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacistService_CreateMedicine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacistServiceServer).CreateMedicine(ctx, req.(*CreateMedicineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacistService_GetMedicineById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicineByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacistServiceServer).GetMedicineById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacistService_GetMedicineById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacistServiceServer).GetMedicineById(ctx, req.(*GetMedicineByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacistService_ListMedicines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMedicinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacistServiceServer).ListMedicines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacistService_ListMedicines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacistServiceServer).ListMedicines(ctx, req.(*ListMedicinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacistService_UpdateMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedicineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacistServiceServer).UpdateMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacistService_UpdateMedicine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacistServiceServer).UpdateMedicine(ctx, req.(*UpdateMedicineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacistService_DeleteMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMedicineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacistServiceServer).DeleteMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacistService_DeleteMedicine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacistServiceServer).DeleteMedicine(ctx, req.(*DeleteMedicineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacistService_CreateMedicineCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMedicineCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacistServiceServer).CreateMedicineCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacistService_CreateMedicineCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacistServiceServer).CreateMedicineCategory(ctx, req.(*CreateMedicineCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacistService_GetMedicineCategoryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicineCategoryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacistServiceServer).GetMedicineCategoryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacistService_GetMedicineCategoryById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacistServiceServer).GetMedicineCategoryById(ctx, req.(*GetMedicineCategoryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacistService_ListMedicineCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMedicineCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacistServiceServer).ListMedicineCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacistService_ListMedicineCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacistServiceServer).ListMedicineCategories(ctx, req.(*ListMedicineCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacistService_UpdateMedicineCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedicineCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacistServiceServer).UpdateMedicineCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacistService_UpdateMedicineCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacistServiceServer).UpdateMedicineCategory(ctx, req.(*UpdateMedicineCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PharmacistService_DeleteMedicineCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMedicineCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PharmacistServiceServer).DeleteMedicineCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PharmacistService_DeleteMedicineCategory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PharmacistServiceServer).DeleteMedicineCategory(ctx, req.(*DeleteMedicineCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PharmacistService_ServiceDesc is the grpc.ServiceDesc for PharmacistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PharmacistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PharmacistService",
	HandlerType: (*PharmacistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMedicine",
			Handler:    _PharmacistService_CreateMedicine_Handler,
		},
		{
			MethodName: "GetMedicineById",
			Handler:    _PharmacistService_GetMedicineById_Handler,
		},
		{
			MethodName: "ListMedicines",
			Handler:    _PharmacistService_ListMedicines_Handler,
		},
		{
			MethodName: "UpdateMedicine",
			Handler:    _PharmacistService_UpdateMedicine_Handler,
		},
		{
			MethodName: "DeleteMedicine",
			Handler:    _PharmacistService_DeleteMedicine_Handler,
		},
		{
			MethodName: "CreateMedicineCategory",
			Handler:    _PharmacistService_CreateMedicineCategory_Handler,
		},
		{
			MethodName: "GetMedicineCategoryById",
			Handler:    _PharmacistService_GetMedicineCategoryById_Handler,
		},
		{
			MethodName: "ListMedicineCategories",
			Handler:    _PharmacistService_ListMedicineCategories_Handler,
		},
		{
			MethodName: "UpdateMedicineCategory",
			Handler:    _PharmacistService_UpdateMedicineCategory_Handler,
		},
		{
			MethodName: "DeleteMedicineCategory",
			Handler:    _PharmacistService_DeleteMedicineCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/pharmacist-service/pharmacist-service.proto",
}
