// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package storage

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type MedicineCategory string

const (
	MedicineCategoryMEDICINECATEGORYUNSPECIFIED MedicineCategory = "MEDICINE_CATEGORY_UNSPECIFIED"
	MedicineCategoryMEDICINECATEGORYANTIBIOTIC  MedicineCategory = "MEDICINE_CATEGORY_ANTIBIOTIC"
	MedicineCategoryMEDICINECATEGORYANALGESIC   MedicineCategory = "MEDICINE_CATEGORY_ANALGESIC"
	MedicineCategoryMEDICINECATEGORYANTIVIRAL   MedicineCategory = "MEDICINE_CATEGORY_ANTIVIRAL"
	MedicineCategoryMEDICINECATEGORYVITAMINS    MedicineCategory = "MEDICINE_CATEGORY_VITAMINS"
	MedicineCategoryMEDICINECATEGORYANTIFUNGAL  MedicineCategory = "MEDICINE_CATEGORY_ANTIFUNGAL"
	MedicineCategoryMEDICINECATEGORYVACCINE     MedicineCategory = "MEDICINE_CATEGORY_VACCINE"
	MedicineCategoryMEDICINECATEGORYOTHER       MedicineCategory = "MEDICINE_CATEGORY_OTHER"
)

func (e *MedicineCategory) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MedicineCategory(s)
	case string:
		*e = MedicineCategory(s)
	default:
		return fmt.Errorf("unsupported scan type for MedicineCategory: %T", src)
	}
	return nil
}

type NullMedicineCategory struct {
	MedicineCategory MedicineCategory
	Valid            bool // Valid is true if MedicineCategory is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMedicineCategory) Scan(value interface{}) error {
	if value == nil {
		ns.MedicineCategory, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MedicineCategory.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMedicineCategory) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MedicineCategory), nil
}

type MedicineStatus string

const (
	MedicineStatusMEDICINESTATUSUNSPECIFIED  MedicineStatus = "MEDICINE_STATUS_UNSPECIFIED"
	MedicineStatusMEDICINESTATUSAVAILABLE    MedicineStatus = "MEDICINE_STATUS_AVAILABLE"
	MedicineStatusMEDICINESTATUSOUTOFSTOCK   MedicineStatus = "MEDICINE_STATUS_OUT_OF_STOCK"
	MedicineStatusMEDICINESTATUSEXPIRED      MedicineStatus = "MEDICINE_STATUS_EXPIRED"
	MedicineStatusMEDICINESTATUSDISCONTINUED MedicineStatus = "MEDICINE_STATUS_DISCONTINUED"
)

func (e *MedicineStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MedicineStatus(s)
	case string:
		*e = MedicineStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for MedicineStatus: %T", src)
	}
	return nil
}

type NullMedicineStatus struct {
	MedicineStatus MedicineStatus
	Valid          bool // Valid is true if MedicineStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMedicineStatus) Scan(value interface{}) error {
	if value == nil {
		ns.MedicineStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MedicineStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMedicineStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MedicineStatus), nil
}

type Medicine struct {
	ID          uuid.UUID
	Name        string
	Category    MedicineCategory
	Description string
	Price       float64
	Company     string
	Status      MedicineStatus
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	DeletedAt   sql.NullTime
}
