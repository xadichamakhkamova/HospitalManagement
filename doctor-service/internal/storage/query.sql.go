// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package storage

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createAppointment = `-- name: CreateAppointment :one

INSERT INTO appointments (
    doctor_id,
    patient_id,
    appointment_date
)
VALUES ($1, $2, $3)
RETURNING
    id,
    doctor_id,
    patient_id,
    appointment_date,
    created_at,
    updated_at
`

type CreateAppointmentParams struct {
	DoctorID        uuid.UUID
	PatientID       uuid.UUID
	AppointmentDate time.Time
}

type CreateAppointmentRow struct {
	ID              uuid.UUID
	DoctorID        uuid.UUID
	PatientID       uuid.UUID
	AppointmentDate time.Time
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
}

// -------------- Appointment CRUD ----------------
func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (CreateAppointmentRow, error) {
	row := q.db.QueryRowContext(ctx, createAppointment, arg.DoctorID, arg.PatientID, arg.AppointmentDate)
	var i CreateAppointmentRow
	err := row.Scan(
		&i.ID,
		&i.DoctorID,
		&i.PatientID,
		&i.AppointmentDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPrescription = `-- name: CreatePrescription :one

INSERT INTO prescriptions
    (
        doctor_id,
        patient_id,
        case_history,
        medication,
        description
    )
VALUES($1, $2, $3, $4, $5)
RETURNING
    id,
    doctor_id,
    patient_id,
    case_history,
    medication,
    description,
    created_at,
    updated_at
`

type CreatePrescriptionParams struct {
	DoctorID    uuid.UUID
	PatientID   uuid.UUID
	CaseHistory string
	Medication  string
	Description sql.NullString
}

type CreatePrescriptionRow struct {
	ID          uuid.UUID
	DoctorID    uuid.UUID
	PatientID   uuid.UUID
	CaseHistory string
	Medication  string
	Description sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

// -------------- Prescription CRUD ----------------
func (q *Queries) CreatePrescription(ctx context.Context, arg CreatePrescriptionParams) (CreatePrescriptionRow, error) {
	row := q.db.QueryRowContext(ctx, createPrescription,
		arg.DoctorID,
		arg.PatientID,
		arg.CaseHistory,
		arg.Medication,
		arg.Description,
	)
	var i CreatePrescriptionRow
	err := row.Scan(
		&i.ID,
		&i.DoctorID,
		&i.PatientID,
		&i.CaseHistory,
		&i.Medication,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAppointment = `-- name: DeleteAppointment :exec
UPDATE appointments
SET deleted_at = $2
WHERE id = $1
`

type DeleteAppointmentParams struct {
	ID        uuid.UUID
	DeletedAt sql.NullTime
}

func (q *Queries) DeleteAppointment(ctx context.Context, arg DeleteAppointmentParams) error {
	_, err := q.db.ExecContext(ctx, deleteAppointment, arg.ID, arg.DeletedAt)
	return err
}

const deletePrescription = `-- name: DeletePrescription :exec
UPDATE prescriptions
SET deleted_at = $2
WHERE id = $1
`

type DeletePrescriptionParams struct {
	ID        uuid.UUID
	DeletedAt sql.NullTime
}

func (q *Queries) DeletePrescription(ctx context.Context, arg DeletePrescriptionParams) error {
	_, err := q.db.ExecContext(ctx, deletePrescription, arg.ID, arg.DeletedAt)
	return err
}

const getAppointmentById = `-- name: GetAppointmentById :one
SELECT 
    id,
    doctor_id,
    patient_id,
    appointment_date,
    created_at,
    updated_at
FROM appointments
WHERE id=$1 
  AND deleted_at IS NULL
`

type GetAppointmentByIdRow struct {
	ID              uuid.UUID
	DoctorID        uuid.UUID
	PatientID       uuid.UUID
	AppointmentDate time.Time
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
}

func (q *Queries) GetAppointmentById(ctx context.Context, id uuid.UUID) (GetAppointmentByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getAppointmentById, id)
	var i GetAppointmentByIdRow
	err := row.Scan(
		&i.ID,
		&i.DoctorID,
		&i.PatientID,
		&i.AppointmentDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPrescriptionById = `-- name: GetPrescriptionById :one
SELECT 
    id,
    doctor_id,
    patient_id,
    case_history,
    medication,
    description,
    created_at,
    updated_at
FROM prescriptions
WHERE id=$1 
  AND deleted_at IS NULL
`

type GetPrescriptionByIdRow struct {
	ID          uuid.UUID
	DoctorID    uuid.UUID
	PatientID   uuid.UUID
	CaseHistory string
	Medication  string
	Description sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) GetPrescriptionById(ctx context.Context, id uuid.UUID) (GetPrescriptionByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getPrescriptionById, id)
	var i GetPrescriptionByIdRow
	err := row.Scan(
		&i.ID,
		&i.DoctorID,
		&i.PatientID,
		&i.CaseHistory,
		&i.Medication,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAppointments = `-- name: ListAppointments :many
SELECT 
    id,
    doctor_id,
    patient_id,
    appointment_date,
    created_at,
    updated_at,
    COUNT(*) OVER() AS total_count
FROM appointments
WHERE deleted_at IS NULL 
  AND ($1::date IS NULL OR DATE(appointment_date) = DATE($1::date))
ORDER BY appointment_date DESC
LIMIT $2 
OFFSET ($3 - 1) * $2
`

type ListAppointmentsParams struct {
	Column1 time.Time
	Limit   int32
	Column3 interface{}
}

type ListAppointmentsRow struct {
	ID              uuid.UUID
	DoctorID        uuid.UUID
	PatientID       uuid.UUID
	AppointmentDate time.Time
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
	TotalCount      int64
}

func (q *Queries) ListAppointments(ctx context.Context, arg ListAppointmentsParams) ([]ListAppointmentsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAppointments, arg.Column1, arg.Limit, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAppointmentsRow
	for rows.Next() {
		var i ListAppointmentsRow
		if err := rows.Scan(
			&i.ID,
			&i.DoctorID,
			&i.PatientID,
			&i.AppointmentDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPrescriptions = `-- name: ListPrescriptions :many
SELECT 
    id,
    doctor_id,
    patient_id,
    case_history,
    medication,
    description,
    created_at,
    updated_at,
    COUNT(*) OVER() AS total_count
FROM prescriptions
WHERE deleted_at IS NULL 
ORDER BY created_at DESC
LIMIT $1
OFFSET ($2 - 1) * $1
`

type ListPrescriptionsParams struct {
	Limit   int32
	Column2 interface{}
}

type ListPrescriptionsRow struct {
	ID          uuid.UUID
	DoctorID    uuid.UUID
	PatientID   uuid.UUID
	CaseHistory string
	Medication  string
	Description sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	TotalCount  int64
}

func (q *Queries) ListPrescriptions(ctx context.Context, arg ListPrescriptionsParams) ([]ListPrescriptionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPrescriptions, arg.Limit, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPrescriptionsRow
	for rows.Next() {
		var i ListPrescriptionsRow
		if err := rows.Scan(
			&i.ID,
			&i.DoctorID,
			&i.PatientID,
			&i.CaseHistory,
			&i.Medication,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAppointment = `-- name: UpdateAppointment :one
UPDATE appointments
SET
    doctor_id = $2,
    patient_id = $3,
    appointment_date = $4,
    updated_at = $5
WHERE id = $1
  AND deleted_at IS NULL
RETURNING
    id,
    doctor_id,
    patient_id,
    appointment_date,
    created_at,
    updated_at
`

type UpdateAppointmentParams struct {
	ID              uuid.UUID
	DoctorID        uuid.UUID
	PatientID       uuid.UUID
	AppointmentDate time.Time
	UpdatedAt       sql.NullTime
}

type UpdateAppointmentRow struct {
	ID              uuid.UUID
	DoctorID        uuid.UUID
	PatientID       uuid.UUID
	AppointmentDate time.Time
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
}

func (q *Queries) UpdateAppointment(ctx context.Context, arg UpdateAppointmentParams) (UpdateAppointmentRow, error) {
	row := q.db.QueryRowContext(ctx, updateAppointment,
		arg.ID,
		arg.DoctorID,
		arg.PatientID,
		arg.AppointmentDate,
		arg.UpdatedAt,
	)
	var i UpdateAppointmentRow
	err := row.Scan(
		&i.ID,
		&i.DoctorID,
		&i.PatientID,
		&i.AppointmentDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePrescription = `-- name: UpdatePrescription :one
UPDATE prescriptions 
SET 
    doctor_id = $2,
    patient_id = $3,
    case_history = $4,
    medication = $5,
    description= $6,
    updated_at = $7
WHERE id = $1 
    AND deleted_at IS NULL
RETURNING
    id,
    doctor_id,
    patient_id,
    case_history,
    medication,
    description,
    created_at,
    updated_at
`

type UpdatePrescriptionParams struct {
	ID          uuid.UUID
	DoctorID    uuid.UUID
	PatientID   uuid.UUID
	CaseHistory string
	Medication  string
	Description sql.NullString
	UpdatedAt   sql.NullTime
}

type UpdatePrescriptionRow struct {
	ID          uuid.UUID
	DoctorID    uuid.UUID
	PatientID   uuid.UUID
	CaseHistory string
	Medication  string
	Description sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) UpdatePrescription(ctx context.Context, arg UpdatePrescriptionParams) (UpdatePrescriptionRow, error) {
	row := q.db.QueryRowContext(ctx, updatePrescription,
		arg.ID,
		arg.DoctorID,
		arg.PatientID,
		arg.CaseHistory,
		arg.Medication,
		arg.Description,
		arg.UpdatedAt,
	)
	var i UpdatePrescriptionRow
	err := row.Scan(
		&i.ID,
		&i.DoctorID,
		&i.PatientID,
		&i.CaseHistory,
		&i.Medication,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
