// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package storage

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type BloodType string

const (
	BloodTypeAPOSITIVE  BloodType = "A_POSITIVE"
	BloodTypeANEGATIVE  BloodType = "A_NEGATIVE"
	BloodTypeBPOSITIVE  BloodType = "B_POSITIVE"
	BloodTypeBNEGATIVE  BloodType = "B_NEGATIVE"
	BloodTypeABPOSITIVE BloodType = "AB_POSITIVE"
	BloodTypeABNEGATIVE BloodType = "AB_NEGATIVE"
	BloodTypeOPOSITIVE  BloodType = "O_POSITIVE"
	BloodTypeONEGATIVE  BloodType = "O_NEGATIVE"
)

func (e *BloodType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BloodType(s)
	case string:
		*e = BloodType(s)
	default:
		return fmt.Errorf("unsupported scan type for BloodType: %T", src)
	}
	return nil
}

type NullBloodType struct {
	BloodType BloodType
	Valid     bool // Valid is true if BloodType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBloodType) Scan(value interface{}) error {
	if value == nil {
		ns.BloodType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BloodType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBloodType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BloodType), nil
}

type GenderType string

const (
	GenderTypeMALE   GenderType = "MALE"
	GenderTypeFEMALE GenderType = "FEMALE"
)

func (e *GenderType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GenderType(s)
	case string:
		*e = GenderType(s)
	default:
		return fmt.Errorf("unsupported scan type for GenderType: %T", src)
	}
	return nil
}

type NullGenderType struct {
	GenderType GenderType
	Valid      bool // Valid is true if GenderType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGenderType) Scan(value interface{}) error {
	if value == nil {
		ns.GenderType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GenderType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGenderType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GenderType), nil
}

type Patient struct {
	ID          uuid.UUID
	FullName    string
	Email       string
	Password    string
	Address     string
	PhoneNumber string
	Gender      GenderType
	BirthDate   time.Time
	BloodGroup  BloodType
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	DeletedAt   sql.NullTime
}
