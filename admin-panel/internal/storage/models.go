// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package storage

import (
	"database/sql"
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
)

type BedStatus string

const (
	BedStatusBEDSTATUSAVAILABLE   BedStatus = "BED_STATUS_AVAILABLE"
	BedStatusBEDSTATUSOCCUPIED    BedStatus = "BED_STATUS_OCCUPIED"
	BedStatusBEDSTATUSRESERVED    BedStatus = "BED_STATUS_RESERVED"
	BedStatusBEDSTATUSMAINTENANCE BedStatus = "BED_STATUS_MAINTENANCE"
)

func (e *BedStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BedStatus(s)
	case string:
		*e = BedStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for BedStatus: %T", src)
	}
	return nil
}

type NullBedStatus struct {
	BedStatus BedStatus
	Valid     bool // Valid is true if BedStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBedStatus) Scan(value interface{}) error {
	if value == nil {
		ns.BedStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BedStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBedStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BedStatus), nil
}

type BedType string

const (
	BedTypeGENERAL  BedType = "GENERAL"
	BedTypePERSONAL BedType = "PERSONAL"
	BedTypeICU      BedType = "ICU"
	BedTypeSURGICAL BedType = "SURGICAL"
)

func (e *BedType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BedType(s)
	case string:
		*e = BedType(s)
	default:
		return fmt.Errorf("unsupported scan type for BedType: %T", src)
	}
	return nil
}

type NullBedType struct {
	BedType BedType
	Valid   bool // Valid is true if BedType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBedType) Scan(value interface{}) error {
	if value == nil {
		ns.BedType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BedType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBedType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BedType), nil
}

type Bed struct {
	ID          uuid.UUID
	BedNumber   int64
	BedType     BedType
	Description string
	Status      BedStatus
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	DeletedAt   sql.NullTime
}

type Department struct {
	ID          uuid.UUID
	Name        string
	Number      int32
	Description sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	DeletedAt   sql.NullTime
}

type Doctor struct {
	ID               uuid.UUID
	PersonalID       uuid.UUID
	DepartmentNumber int64
	CreatedAt        sql.NullTime
	UpdatedAt        sql.NullTime
	DeletedAt        sql.NullTime
}

type Personal struct {
	ID          uuid.UUID
	Profession  string
	FullName    string
	Email       string
	Password    string
	Address     sql.NullString
	PhoneNumber sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	DeletedAt   sql.NullTime
}
